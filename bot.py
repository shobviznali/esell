import telebot
import os
from dotenv import load_dotenv
from woocommerce import API
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WC_URL = os.getenv("WOOCOMMERCE_URL")
WC_KEY = os.getenv("WOOCOMMERCE_CONSUMER_KEY")
WC_SECRET = os.getenv("WOOCOMMERCE_CONSUMER_SECRET")

bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# WooCommerce API
wcapi = API(
    url=WC_URL,
    consumer_key=WC_KEY,
    consumer_secret=WC_SECRET,
    version="wc/v3"
)

# –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–∏–π
transliteration_map = {
    'a': ['’°'], 'b': ['’¢'], 'g': ['’£'], 'd': ['’§'],
    'e': ['’•', '’ß'], 'z': ['’¶'], 't': ['’ø', '’©'], 'i': ['’´'],
    'l': ['’¨'], 'kh': ['’≠'], 'k': ['’Ø', '÷Ñ'], 'h': ['’∞'], 'j': ['’ª'],
    'sh': ['’∑'], 'ch': ['’π', '’≥'], 'zh': ['’™'], 'x': ['’≠', '’≤'],
    'c': ['÷Å', '÷Ñ', '’Æ'], 'm': ['’¥'], 'y': ['’µ'], 'n': ['’∂'],
    'o': ['÷Ö', '’∏'], 'p': ['’∫', '÷É'], 'r': ['÷Ä', '’º'], 's': ['’Ω'],
    'v': ['’æ'], 'u': ['’∏÷Ç'], 'f': ['÷Ü'], 'q': ['÷Ñ'], 'ev': ['÷á'],
    'ts': ['÷Å', '’Æ'], 'ye': ['’•'], 'gh': ['’≤'], 'vo': ['’∏']
}

def transliterate_to_armenian(text):
    text = text.lower()
    result = ''

    i = 0
    while i < len(text):
        # –°–Ω–∞—á–∞–ª–∞ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
        two_letter = text[i:i+2]
        if two_letter in transliteration_map:
            result += transliteration_map[two_letter][0]
            i += 2
            continue

        # –ü–æ—Ç–æ–º –æ–¥–Ω–æ–±—É–∫–≤–µ–Ω–Ω—ã–µ
        one_letter = text[i]
        if one_letter in transliteration_map:
            result += transliteration_map[one_letter][0]
        else:
            result += one_letter
        i += 1

    return result

# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
def search_product(product_name):
    response = wcapi.get("products", params={"search": product_name})
    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∞–π—Ç—É üòï", []

    data = response.json()

    if not data:
        return f"’è’æ’µ’°’¨ ’°’∫÷Ä’°’∂÷Ñ’® `{product_name}` ’π’´ ’£’ø’∂’æ’•’¨ üòï", []

    items = []
    for product in data[:3]:  # –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞
        items.append({
            "name": product["name"],
            "price": product.get("price", "’π’´ ’∂’∑’æ’°’Æ"),
            "link": product.get("permalink", "")
        })

    return None, items

# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
def extract_product_name(user_input):
    prompt = f"""
–¢—ã ‚Äî –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{user_input}"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ. 
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
"""
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

    extracted_name = response.choices[0].message.content.strip()
    armenian_name = transliterate_to_armenian(extracted_name)
    print(f"[GPT Extracted] '{extracted_name}' ‚Üí [Armenian] '{armenian_name}'")
    return armenian_name

# –°–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
def generate_gpt_response(user_question, products):
    product_info = "\n".join([
        f"{p['name']} ‚Äî {p['price']} ’§÷Ä’°’¥ ‚Äî {p['link']}"
        for p in products
    ])

    prompt = f"""
‘¥’∏÷Ç ’≠’°’∂’∏÷Ç’©’´ ÷Ö’∂’¨’°’µ’∂ ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω÷â ‘±’∞’° ’©’• ’´’∂’π ’ß ’∞’°÷Ä÷Å÷Ä’•’¨ ’∞’°’≥’°’≠’∏÷Ä’§’® "{user_question}"

‘±’∞’° ’©’• ’´’∂’π ’•’∂÷Ñ ’£’ø’•’¨
{product_info}

’ä’°’ø’°’Ω’≠’°’∂’´÷Ä ’¢’°÷Ä’•’∞’°’¥’¢’∏÷Ç’µ’©, ’°’Ω’•’Ω ’©’• ’§’∏÷Ç ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω ÷á ’°’º’°’ª’°÷Ä’Ø’´÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â ‘±’º’°’∂÷Å ’°’æ’•’¨’∏÷Ä’§ ’´’∂÷Ü’∏÷Ä’¥’°÷Å’´’°’µ’´÷â ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞’≤’∏÷Ç’¥’∂’•÷Ä’®÷â ’é’•÷Ä’ª’∏÷Ç’¥ ’¥’´’°’µ’∂ ’∂’∑’´÷Ä’ù ’∏÷Ç’∂’´ ’°÷Ä’§’µ’∏÷Ñ ’°’µ’¨ ’∞’°÷Ä÷Å’•÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’®÷â
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6,
    )

    return response.choices[0].message.content

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text.strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º
    product_name = extract_product_name(user_query)

    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
    error, results = search_product(product_name)
    if error:
        bot.send_message(message.chat.id, error)
        return

    # GPT: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    gpt_reply = generate_gpt_response(user_query, results)
    bot.send_message(message.chat.id, gpt_reply, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫
print("–ë–æ—Ç —Å GPT –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π –∑–∞–ø—É—â–µ–Ω")
bot.polling()

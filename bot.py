import telebot
import os
from dotenv import load_dotenv
from woocommerce import API
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WC_URL = os.getenv("WOOCOMMERCE_URL")
WC_KEY = os.getenv("WOOCOMMERCE_CONSUMER_KEY")
WC_SECRET = os.getenv("WOOCOMMERCE_CONSUMER_SECRET")
# OPENAI_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
# WooCommerce API
wcapi = API(
    url=WC_URL,
    consumer_key=WC_KEY,
    consumer_secret=WC_SECRET,
    version="wc/v3"
)

# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
def search_product(product_name):
    response = wcapi.get("products", params={"search": product_name})
    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∞–π—Ç—É üòï", []

    data = response.json()

    if not data:
        return f"–¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", []

    items = []
    for product in data[:3]:  # –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞
        items.append({
            "name": product["name"],
            "price": product.get("price", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
            "link": product.get("permalink", "")
        })

    print(items)
    return None, items

# GPT: –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç

def extract_product_name(user_input):
    prompt = f"""
–¢—ã ‚Äî –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{user_input}"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Ñ—Ä–∞–∑–æ–π ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

    return response.choices[0].message.content.strip()

def generate_gpt_response(user_question, products):
    product_info = "\n".join([
        f"{p['name']} ‚Äî {p['price']} –¥—Ä–∞–º ‚Äî {p['link']}"
        for p in products
    ])

    prompt = f"""
‘¥’∏÷Ç ’≠’°’∂’∏÷Ç’©’´ ÷Ö’∂’¨’°’µ’∂ ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω÷â ‘±’∞’° ’©’• ’´’∂’π ’ß ’∞’°÷Ä÷Å÷Ä’•’¨ ’∞’°’≥’°’≠’∏÷Ä’§’® "{user_question}"

‘±’∞’° ’©’• ’´’∂’π ’•’∂÷Ñ ’£’ø’•’¨
{product_info}

’ä’°’ø’°’Ω’≠’°’∂’´÷Ä ’¢’°÷Ä’•’∞’°’¥’¢’∏÷Ç’µ’©, ’°’Ω’•’Ω ’©’• ’§’∏÷Ç ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω ÷á ’°’º’°’ª’°÷Ä’Ø’´÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â ‘±’º’°’∂’°÷Å ’°’æ’•’¨’∏÷Ä’§ ’´’∂÷Ü’∏÷Ä’¥’°÷Å’´’°’µ’´÷â ‘±’∂’∫’°’µ’¥’°’∂ ’∏÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞’≤’∏÷Ç’¥’®÷â ’é’•÷Ä’ª’∏÷Ç’¥ ’¥’´’°’µ’∂ ’∂’∑’´÷Ä, ’∏÷Ç’∂’´ ’°÷Ä’§’µ’∏÷Ñ ’°’µ’¨ ’∞’°÷Ä÷Å’•÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’®
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6,
    )

    return response.choices[0].message.content


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä
    product_name = extract_product_name(user_query)
    print(f"–ò—â—É —Ç–æ–≤–∞—Ä: {product_name}")

    # –ü–æ—Ç–æ–º –∏—â–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ
    error, results = search_product(product_name)
    if error:
        bot.send_message(message.chat.id, error)
        return

    # GPT –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ—Ç
    gpt_reply = generate_gpt_response(user_query, results)
    bot.send_message(message.chat.id, gpt_reply, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫
print("–ë–æ—Ç —Å GPT –∑–∞–ø—É—â–µ–Ω")
bot.polling()
